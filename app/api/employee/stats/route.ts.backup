import { NextRequest, NextResponse } from 'next/server';
import { verifySession } from '@/lib/auth';
import { executeQuery } from '@/lib/database';

export async function GET(request: NextRequest) {
  try {
    const session = await verifySession(request);
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const today = new Date().toISOString().split('T')[0];
    const weekStart = new Date();
    weekStart.setDate(weekStart.getDate() - weekStart.getDay());
    const weekStartStr = weekStart.toISOString().split('T')[0];

    const [todayStats] = await executeQuery(`
      SELECT 
        COALESCE(SUM(total_hours), 0) as total_hours,
        COALESCE(SUM(total_pay), 0) as total_pay
      FROM time_entries 
      WHERE employee_id = ? AND DATE(clock_in_time) = ?
    `, [session.employee_id, today]);

    const [weekStats] = await executeQuery(`
      SELECT 
        COALESCE(SUM(total_hours), 0) as total_hours,
        COALESCE(SUM(total_pay), 0) as total_pay
      FROM time_entries 
      WHERE employee_id = ? AND DATE(clock_in_time) >= ?
    `, [session.employee_id, weekStartStr]);

    const [currentEntry] = await executeQuery(`
      SELECT clock_in_time, workload_level, break_duration_minutes
      FROM time_entries 
      WHERE employee_id = ? AND DATE(clock_in_time) = ? AND clock_out_time IS NULL
      ORDER BY clock_in_time DESC LIMIT 1
    `, [session.employee_id, today]);

    return NextResponse.json({
      todayHours: parseFloat(todayStats.total_hours) || 0,
      todayPay: parseFloat(todayStats.total_pay) || 0,
      weekHours: parseFloat(weekStats.total_hours) || 0,
      weekPay: parseFloat(weekStats.total_pay) || 0,
      isClocked: !!currentEntry,
      currentShiftStart: currentEntry ? currentEntry.clock_in_time : null,
      currentWorkload: currentEntry ? currentEntry.workload_level : null,
      currentBreakTime: currentEntry ? currentEntry.break_duration_minutes : 0
    });
  } catch (error) {
    console.error('Error fetching employee stats:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}
